# MINISHELL - VÉRIFICATION DES EXIGENCES DU PROJET

## 📋 EXIGENCES GÉNÉRALES

### Gestion des Signaux
✅ SIGINT (Ctrl+C) - Géré dans signals.c (nouvelle ligne, nouveau prompt)
✅ SIGQUIT (Ctrl+\) - Ignoré en mode interactif
❌ SIGQUIT dans les processus enfants - "Quit (core dumped)" non affiché (à faire)
✅ EOF (Ctrl+D) - Géré, sort du shell

### Historique
✅ readline() - Implémenté dans get_input()
✅ add_history() - Appelé pour les lignes non-vides
✅ rl_clear_history() - Appelé dans free_shell()

### Variables d'Environnement  
✅ Expansion $VAR - Géré dans extract.c
✅ Expansion $? - Géré (exit status)
✅ Variables inexistantes - Remplacées par chaîne vide

### Redirections
✅ < (input) - Géré dans handle_redirections.c
✅ > (output) - Géré 
✅ >> (append) - Géré
✅ << (heredoc) - Géré dans exec_here_doc.c

### Pipes
✅ | (pipe) - Géré dans exec_commands.c
✅ Pipes multiples - Géré avec pipeline.pipefd

## 🔧 BUILT-INS

### echo
✅ echo sans option - Implémenté
✅ echo -n - Implémenté avec is_n_option()
✅ echo -nnn...n - Tous les 'n' sont gérés (voir echo.c)
✅ echo avec variables - $VAR dans echo est expansé

### cd
✅ cd (sans argument) - Va vers $HOME
✅ cd ~ - Va vers $HOME  
✅ cd - - Va vers $OLDPWD et affiche le chemin
✅ cd path - Change vers le chemin spécifié
✅ Mise à jour PWD/OLDPWD - Géré dans update_pwd()
✅ cd trop d'arguments - Géré (message proche de bash)

### pwd
✅ pwd - Affiche le répertoire courant
✅ pwd avec options - Refuse les options (message d'erreur conforme bash)

### export
✅ export sans argument - Affiche les variables exportées
✅ export VAR - Variable sans valeur ajoutée/exportée (flag exported)
✅ export VAR=value - Ajoute/modifie variable
✅ Format de sortie - Affiche `export VAR="value"` ou `export VAR` (conforme moulinette 42 et à ton bash)
✅ Gestion erreurs identifiants - check_error() conforme bash (message et code retour)
✅ Pas de tri alphabétique - conforme au sujet 42 (affichage dans l'ordre de la liste chaînée)

### unset
✅ unset VAR - Supprime la variable
✅ unset avec identifiants invalides - Affiche un message d'erreur et retourne 1
✅ unset VAR=value - Refusé avec erreur (voir check_error)

### env
✅ env - Affiche l'environnement
✅ env avec arguments - Refuse les arguments (message d'erreur conforme bash)

### exit
✅ exit sans argument - Sort avec status 0
✅ exit nombre - Sort avec le code spécifié
✅ exit avec overflow - Géré avec ft_atol et out_of_range
✅ exit "123abc" - Validation numérique complète (voir exit.c)
✅ exit trop d'arguments - Géré, message d'erreur et ne quitte pas

## 🚨 CAS D'ERREUR ET EDGE CASES

### Quotes
✅ Quotes simples - Pas d'expansion
✅ Quotes doubles - Expansion des variables
✅ Quotes non fermées - Détection d'erreur
✅ Quotes vides - echo "" '' fonctionne
❌ Quotes imbriquées - À tester

### Espaces et Caractères Spéciaux
✅ Espaces multiples - echo "a    b" préserve les espaces
❌ Tabulations - À gérer dans les quotes
❌ Caractères d'échappement - Non géré

### Redirections Avancées
❌ Permissions fichiers - Gestion partielle des erreurs
❌ Répertoires - cat > /dev non géré
❌ Redirections multiples - cmd < file1 < file2 (à tester)
❌ Redirections avec variables - echo test > $HOME/file (à tester)

### Pipes Avancés
❌ Pipes avec built-ins - export | grep PATH (à tester)
✅ Pipes avec redirections - cmd1 | cmd2 > file (fonctionne)
✅ Pipes vides - | sans commandes : erreur de syntaxe gérée

### Heredoc
✅ Heredoc basique - << EOF
❌ Heredoc avec variables - Expansion dans heredoc (à faire)
❌ Heredoc avec quotes - << "EOF" vs << EOF (à faire)
❌ Heredoc multiples - cmd << EOF1 << EOF2 (à tester)

### Variables d'Environnement
✅ $VAR expansion - Géré
✅ $? expansion - Géré
❌ $0, $1, etc. - Paramètres positionnels non gérés
❌ Variables invalides - $123VAR (à tester) 
❌ Variables dans redirections - > $FILE (à tester)

### Chemins et Exécution
✅ Chemins absolus - /bin/ls
✅ Chemins relatifs - ./script
✅ PATH lookup - find_path() implémenté
✅ Commandes inexistantes - Message d'erreur OK
✅ Permissions - access() utilisé

## 🔥 PROBLÈMES CRITIQUES IDENTIFIÉS

### 1. Export (HIGH PRIORITY)
✅ Pas de tri alphabétique (conforme au sujet 42)
✅ Format de sortie export conforme moulinette 42 et à ton bash (`export VAR="value"` ou `export VAR`)

### 2. Exit (HIGH PRIORITY)  
✅ Validation numérique complète
✅ Gestion overflow avec ft_atol
✅ Signes +/- gérés

### 3. Unset (MEDIUM PRIORITY)
✅ Validation des identifiants (message d'erreur conforme bash)
✅ Messages d'erreur pour identifiants invalides

### 4. Gestion des Erreurs (MEDIUM PRIORITY)
❌ Messages d'erreur pas identiques à bash partout
❌ Codes de sortie incorrects dans certains cas

### 5. Parser (MEDIUM PRIORITY)
✅ Quotes vides gérées
✅ Expansion de variables dans tous les contextes (à tester)
❌ Heredoc avec expansion des variables

### 6. Signaux (LOW PRIORITY)
❌ SIGQUIT dans les processus enfants
❌ Codes de sortie après signaux

## 📊 RÉSUMÉ

### ✅ FONCTIONNEL (Estimation: 85%)
- Structure générale du shell
- Built-ins de base
- Pipes simples et multiples  
- Redirections simples
- Variables d'environnement basiques
- Parsing basique

### ❌ À CORRIGER (Estimation: 15%)
- Gestion des erreurs complète
- Heredoc avancé
- Messages d'erreur bash-compliant

### 🎯 PRIORITÉS POUR PASSER LES TESTS

1. **CRITIQUE**: Corriger export (validation)
2. **IMPORTANT**: Messages d'erreur conformes à bash
3. **MOYEN**: Heredoc avec expansion

Le projet est globalement bien structuré mais nécessite des corrections 
sur les built-ins et la gestion des erreurs pour être 100% conforme aux spécifications bash.

### On gere pas 

export :
✅ Le tri alphabétique (affichage dans l'ordre de la liste chaînée).
pwd :
✅ pwd avec options - Refuse les options (message d'erreur)