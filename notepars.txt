# MINISHELL - VÉRIFICATION DES EXIGENCES DU PROJET

## 📋 EXIGENCES GÉNÉRALES

### Gestion des Signaux
✅ SIGINT (Ctrl+C) - Géré dans signals.c (nouvelle ligne, nouveau prompt)
✅ SIGQUIT (Ctrl+\) - Ignoré en mode interactif
❌ SIGQUIT dans les processus - Pas de gestion "Quit (core dumped)"
✅ EOF (Ctrl+D) - Géré, sort du shell

### Historique
✅ readline() - Implémenté dans get_input()
✅ add_history() - Appelé pour les lignes non-vides
✅ rl_clear_history() - Appelé dans free_shell()

### Variables d'Environnement  
✅ Expansion $VAR - Géré dans extract.c
✅ Expansion $? - Géré (exit status)
❌ Variables inexistantes - Remplacées par chaîne vide (OK)

### Redirections
✅ < (input) - Géré dans handle_redirections.c
✅ > (output) - Géré 
✅ >> (append) - Géré
✅ << (heredoc) - Géré dans exec_here_doc.c

### Pipes
✅ | (pipe) - Géré dans exec_commands.c
✅ Pipes multiples - Géré avec pipeline.pipefd

## 🔧 BUILT-INS

### echo
✅ echo sans option - Implémenté
✅ echo -n - Implémenté avec is_n_option()
✅ echo -nnn...n - À vérifier si tous les 'n' sont gérés
✅ echo avec variables - $VAR dans echo doit être expansé

### cd
✅ cd (sans argument) - Va vers $HOME
✅ cd ~ - Va vers $HOME  
✅ cd - - Va vers $OLDPWD et affiche le chemin
✅ cd path - Change vers le chemin spécifié
✅ Mise à jour PWD/OLDPWD - Géré dans update_pwd()
✅ cd trop d'arguments - Géré mais message pas identique à bash

### pwd
✅ pwd - Affiche le répertoire courant
✅ pwd avec options - Doit refuser les options

### export
✅ export sans argument - Affiche les variables exportées
❌ export VAR - Variable sans valeur pas complètement géré
✅ export VAR=value - Ajoute/modifie variable
❌ Tri alphabétique - export doit trier la sortie
❌ Format de sortie - Manque guillemets pour certaines valeurs
❌ Gestion erreurs identifiants - check_error() incomplet

### unset
✅ unset VAR - Supprime la variable
❌ unset avec identifiants invalides - Pas de message d'erreur
❌ unset VAR=value - Doit être refusé avec erreur

### env
✅ env - Affiche l'environnement
❌ env avec arguments - Doit refuser les arguments

### exit
✅ exit sans argument - Sort avec status 0
✅ exit nombre - Sort avec le code spécifié
❌ exit avec overflow - ft_atol pas utilisé correctement
❌ exit "123abc" - Validation numérique incomplète
❌ exit trop d'arguments - Géré mais doit rester dans le shell

## 🚨 CAS D'ERREUR ET EDGE CASES

### Quotes
✅ Quotes simples - Pas d'expansion
✅ Quotes doubles - Expansion des variables
✅ Quotes non fermées - Détection d'erreur
✅ Quotes vides - echo "" '' doit fonctionner
❌ Quotes imbriquées - À tester

### Espaces et Caractères Spéciaux
✅ Espaces multiples - echo "a    b" doit préserver
❌ Tabulations - Gestion dans les quotes
❌ Caractères d'échappement - Non géré

### Redirections Avancées
❌ Permissions fichiers - Gestion partielle des erreurs
❌ Répertoires - cat > /dev non géré
❌ Redirections multiples - cmd < file1 < file2
❌ Redirections avec variables - echo test > $HOME/file

### Pipes Avancés
❌ Pipes avec built-ins - export | grep PATH
❌ Pipes avec redirections - cmd1 | cmd2 > file
❌ Pipes vides - | sans commandes

### Heredoc
✅ Heredoc basique - << EOF
❌ Heredoc avec variables - Expansion dans heredoc
❌ Heredoc avec quotes - << "EOF" vs << EOF
❌ Heredoc multiples - cmd << EOF1 << EOF2

### Variables d'Environnement
✅ $VAR expansion - Géré
✅ $? expansion - Géré
❌ $0, $1, etc. - Paramètres positionnels non gérés
❌ Variables invalides - $123VAR
❌ Variables dans redirections - > $FILE

### Chemins et Exécution
✅ Chemins absolus - /bin/ls
✅ Chemins relatifs - ./script
✅ PATH lookup - find_path() implémenté
❌ Commandes inexistantes - Message d'erreur OK
❌ Permissions - access() utilisé mais pas complet

## 🔥 PROBLÈMES CRITIQUES IDENTIFIÉS

### 1. Export (HIGH PRIORITY)
❌ Pas de tri alphabétique dans print_env()
❌ Variables sans valeur mal gérées  
❌ Format de sortie incorrect
❌ check_error() ne valide pas correctement

### 2. Exit (HIGH PRIORITY)  
❌ Validation numérique incomplète
❌ Gestion overflow avec ft_atol manquante
❌ Signes +/- pas gérés correctement

### 3. Unset (MEDIUM PRIORITY)
❌ Pas de validation des identifiants
❌ Pas de messages d'erreur
❌ find_env_var() utilise strncmp au lieu de strcmp

### 4. Gestion des Erreurs (MEDIUM PRIORITY)
❌ Messages d'erreur pas identiques à bash
❌ Codes de sortie incorrects dans certains cas
❌ Gestion des permissions incomplète

### 5. Parser (MEDIUM PRIORITY)
❌ Quotes vides non gérées
❌ Expansion de variables dans tous les contextes
❌ Heredoc avec expansion des variables

### 6. Signaux (LOW PRIORITY)
❌ SIGQUIT dans les processus enfants
❌ Codes de sortie après signaux

## 📊 RÉSUMÉ

### ✅ FONCTIONNEL (Estimation: 70%)
- Structure générale du shell
- Built-ins de base
- Pipes simples  
- Redirections simples
- Variables d'environnement basiques
- Parsing basique

### ❌ À CORRIGER (Estimation: 30%)
- Export complet et conforme
- Exit avec validation numérique
- Gestion des erreurs complète
- Cases edge des quotes
- Heredoc avancé
- Messages d'erreur bash-compliant

### 🎯 PRIORITÉS POUR PASSER LES TESTS

1. **CRITIQUE**: Corriger export (tri, format, validation)
2. **CRITIQUE**: Corriger exit (validation numérique, overflow)
3. **IMPORTANT**: Corriger unset (validation, erreurs)
4. **IMPORTANT**: Messages d'erreur conformes à bash
5. **MOYEN**: Quotes vides et cases edge
6. **MOYEN**: Heredoc avec expansion

Le projet est globalement bien structuré mais nécessite des corrections 
sur les built-ins pour être 100% conforme aux spécifications bash.